---
layout: post
title: Probleml√∂sen mit Algorithmen und Datenstrukturen
date: 2020-02-01
last_modified_at: 2023-02-11
cover_image: 2021-05-03-feature.jpg
author: Yongguang Lin
categories: solving problems
excerpt_separator: <!--more-->
---

> Photo by [Levi Stute](https://unsplash.com/@levi_stute_cinematography).

Die Art und Weise, wie wir √ºber das Programmieren denken, hat sich in den Jahren seit den ersten elektronischen Computern, die Verbindungskabel und Schalter ben√∂tigten, um Anweisungen von Menschen an Maschinen zu √ºbermitteln, stark ver√§ndert. Wie in vielen anderen Bereichen der Gesellschaft bieten die Ver√§nderungen in der Computertechnologie auch den Informatikern eine wachsende Anzahl von Werkzeugen und Plattformen, auf denen sie ihr Handwerk aus√ºben k√∂nnen. 
<!--more-->
Fortschritte wie schnellere Prozessoren, Hochgeschwindigkeitsnetzwerke und gro√üe Speicherkapazit√§ten haben eine Spirale der Komplexit√§t geschaffen, durch die sich IT Experte bewegen m√ºssen. Bei all dieser rasanten Entwicklung sind einige Grundprinzipien konstant geblieben. Die Informatik befasst sich mit dem Einsatz von Computern zur L√∂sung von Problemen. Sie haben zweifellos viel Zeit damit verbracht, die Grundlagen des Probleml√∂sens zu erlernen, und sind hoffentlich zuversichtlich, dass Sie in der Lage sind, eine Problemstellung zu erfassen und eine L√∂sung zu entwickeln. Sie haben auch gelernt, dass das Schreiben von Computerprogrammen oft schwierig ist. Die Komplexit√§t von gro√üen Problemen und die entsprechende Komplexit√§t der L√∂sungen k√∂nnen dazu f√ºhren, dass die grundlegenden Ideen im Zusammenhang mit dem Probleml√∂sungsprozess.

<!--more-->

In diesem Artikel werden zwei wichtige Bereiche f√ºr den Rest des Textes hervorgehoben. 

  - Erstens wird der Rahmen erl√§utert, in den sich die Informatik und das Studium von Algorithmen und Datenstrukturen einf√ºgen m√ºssen, insbesondere die Gr√ºnde, warum wir diese Themen studieren m√ºssen und wie das Verst√§ndnis dieser Themen uns hilft, bessere Probleml√∂ser zu werden. 

  - Zweitens geben wir einen √úberblick √ºber die Programmiersprache Python. Obwohl wir keine detaillierte, ersch√∂pfende Referenz bieten k√∂nnen, werden wir Beispiele und Erkl√§rungen f√ºr die grundlegenden Konstrukte und Ideen geben, die in den restlichen Artikeln vorkommen werden.

# Datentypen und Datenstrukturen
Alle Daten im Computer werden als Zeichenketten aus bin√§ren Ziffern dargestellt. Um diesen Zeichenfolgen eine Bedeutung zu geben, brauchen wir Datentypen. Datentypen bieten eine Interpretation f√ºr diese bin√§ren Daten, so dass wir √ºber die Daten in Begriffen nachdenken k√∂nnen, die in Bezug auf das zu l√∂sende Problem Sinn machen. Grunds√§tzlich wird zwischen primitiven und komplexen Datentypen unterschieden. Die primitiven Datentypen liefern die Bausteine f√ºr die Entwicklung von Algorithmen, wogegen die komplexen Datentypen (Datenstrukturen) als Methode zur Probleml√∂sung fungieren kann.

Insgesamt gibt es acht primitive Datentypen. Beispiele hierf√ºr sind Integer, Boolean, Double, Char. Beispiele f√ºr komplexe Datentypen sind Klassen, B√§ume, Listen und Dictionary, auf die wir sp√§ter darauf eingehen.

## Liste
Eine Liste ist eine Sammlung von Elementen, bei der jedes Element eine relative Position zu den anderen einnimmt. Genauer gesagt, bezeichnen wir diese Art von Liste als ungeordnete Liste. Die Liste kann ein erstes Element, ein zweites Element, ein drittes Element und so weiter enthalten. Wir k√∂nnen uns auch auf den Anfang der Liste (das erste Element) oder das Ende der Liste (das letzte Element) beziehen. Der Einfachheit halber gehen wir davon aus, dass Listen keine doppelten Eintr√§ge (Redundanz) enthalten k√∂nnen.

Zum Beispiel k√∂nnte die Sammlung der ganzen Zahlen 52, 28, 95, 19, 79 und 30 eine einfache ungeordnete Liste von Pr√ºfungsergebnissen darstellen. Beachten Sie, dass wir sie als kommagetrennte Werte geschrieben haben, eine √ºbliche Art, die Listenstruktur darzustellen. Nat√ºrlich w√ºrde Python diese Liste wie folgt darstellen: 
```python
[52, 28, 95, 19, 79, 30]
```
# Algorithmen als Probleml√∂sungsmethode
Algorithmen beschreiben die L√∂sung eines Problems in Form der Daten, die zur Darstellung des Problemfall zu repr√§sentieren, und die Menge der Schritte, die notwendig sind, um das beabsichtigte Ergebnis zu erzielen. 

Es ist √ºblich, Algorithmen miteinander zu vergleichen. Denn oft wird eine interessante Frage gestellt: Wenn zwei Algorithmen das gleiche Problem l√∂sen, aber unterschiedlich aussehen, ist dann der eine Algorithmus besser als der andere?

> ### Viele Wege f√ºhren nach Rom.

Mit dieser Redewendung will man sagen, dass es mehrere M√∂glichkeiten oder Wege gibt, zu einem gew√ºnschten Ziel zu kommen. Und genauso ist es bei Algorithmen. √úber die Vergleichbarkeit und Laufzeit von Algorithmen k√∂nnen Sie [hier](https://de.wikipedia.org/wiki/Komplexit%C3%A4tstheorie) weiterlesen.

## Probleml√∂sen mit Rekursion

Rekursion ist eine Methode (Algorithmus) zur L√∂sung von Problemen, bei der ein Problem in immer kleinere Unterprobleme zerlegt wird, bis das Problem so klein ist, dass es trivial gel√∂st werden kann (Divide-and-Conquer-Methode).

Normalerweise beinhaltet die Rekursion eine Funktion, die sich selbst aufruft. Auch wenn es auf den ersten Blick nicht viel erscheint, erm√∂glicht es uns, elegante L√∂sungen f√ºr Probleme zu schreiben, die sonst sehr schwer zu programmieren w√§ren. Ein bekanntes Beispiel f√ºr elegante L√∂sung mittels Rekursion sind die T√ºrme von Hanoi.

> Isaac Asimov, ein russisch-amerikanischer B√ºrger, ist einer der weltweit ber√ºhmtesten Schriftsteller der Science Fiction. Seine Werke erweitern den Lebensraum der Menschheit literarisch ins Universum. In seinen Romanen und Erz√§hlungen widmete er sich vor allem dem Verh√§ltnis zwischen Mensch und Roboter.

Damit die Algorithmen korrekt funktionieren und terminieren, m√ºssen diese bestimmte Regel folgen. Wie die [Roboter von Asimov](https://www.planet-wissen.de/technik/computer_und_roboter/roboter_mechanische_helfer/pwieisaacasimov100.html) (Asimovs Robotergesetze) m√ºssen alle rekursiven Algorithmen drei wichtigen Gesetzen gehorchen:

  1. Ein rekursiver Algorithmus muss einen Basisfall haben.
  2. Ein rekursiver Algorithmus muss seinen Zustand √§ndern und sich in Richtung des Basisfalls bewegen.
  3. Ein rekursiver Algorithmus muss sich selbst aufrufen, rekursiv.

Verwendung von Rekursion: 

  - Berechne die Summe aus einer Liste von Zahlen rekursiv, z.B. [52, 28, 95, 19, 79, 30].
```python
def sum(lst):
  '''
  lst {list}: a list of numbers
  return: the sum of the numbers
  '''
  if len(lst) == 0: 
    return 0
  elif len(lst) == 1:   # Basisfall
    return lst[0]
  else:
    return lst[0] + sum(lst[1:])  # Rekursiver Aufruf
```

  - Berechnung von der n-ten Fibonacci-Zahl (Goldener Schnitt)
```python
def factorial(n):
  '''
  n {integer}: a number
  return: the factorial of the number n
  '''
  if n == 0:
      return 1
  else:
      return n * factorial(n-1)   # Rekursiver Aufruf
```

  - Visualisierung der Rekursion unter Verwendung von Python‚Äôs turtle Grafiken

  - Sierpinski-Dreieck

  - T√ºrme von Hanoi (Komplexes rekursives Problem)

## Probleml√∂sen mit Klassen

sdfdsf


# Sortier- und Suchalgorithmen
Wir werden uns nun einigen der h√§ufigsten Probleme zuwenden, die bei der Datenverarbeitung auftreten, n√§mlich dem Suchen und Sortieren. In diesem Abschnitt werden wir uns mit der Suche besch√§ftigen. Auf das Sortieren werden wir sp√§ter zur√ºckkommen. Suchen ist der algorithmische Prozess des Auffindens eines bestimmten Elements in einer Sammlung von Elementen. Eine Suche beantwortet in der Regel die Frage, ob das Element vorhanden ist, entweder mit Wahr oder Falsch. Gelegentlich kann sie so modifiziert werden, dass sie zur√ºckgibt, wo das Element gefunden wurde. F√ºr unsere Zwecke wollen wir uns hier nur mit der Frage der Zugeh√∂rigkeit besch√§ftigen.

## Die sequentielle Suche

Wenn Datenelemente in einer Sammlung, z. B. in einer Liste, gespeichert werden, spricht man von einer linearen oder sequentielle Beziehung. Jedes Datenelement wird an einer Position relativ zu den anderen gespeichert. In Python-Listen sind diese relativen Positionen die Indexwerte der einzelnen Elemente. Da diese Indexwerte geordnet sind, ist es m√∂glich, sie nacheinander aufzurufen. Aus diesem Vorgang ergibt sich unsere erste Suchtechnik, die sequentielle Suche.

## Die bin√§re Suche

Die geordnete Liste l√§sst sich noch besser nutzen, wenn wir unsere Vergleiche geschickt einsetzen. Wenn wir bei der sequentiellen Suche mit dem ersten Element vergleichen, gibt es h√∂chstens ùëõ - 1 weitere Elemente, die wir durchsehen m√ºssen, wenn das erste Element nicht das ist, wonach wir suchen. 

Anstatt die Liste der Reihe zudurchsuchen, beginnt eine bin√§re Suche mit der Untersuchung des mittleren Eintrags. Wenn dieser Eintrag der gesuchte ist, ist die Suche beendet. Wenn es nicht der richtige Eintrag ist, k√∂nnen wir die geordnete Natur der Liste nutzen, um die H√§lfte der verbleibenden Eintr√§ge zu eliminieren. Wenn das gesuchte Element gr√∂√üer ist als der mittlere Eintrag, wissen wir, dass die gesamte untere H√§lfte der Liste und auch der mittlere Eintrag von der weiteren Betrachtung ausgeschlossen werden kann. Wenn das Element in der Liste enthalten ist, muss es sich in der oberen H√§lfte befinden.

---
## Sortieren
Beim Sortieren werden die Elemente einer Sammlung in eine bestimmte Reihenfolge gebracht. Ein Beispiel, eine Liste von W√∂rtern kann alphabetisch oder nach L√§nge sortiert werden. Eine Liste von St√§dten kann sortiert werden nach Bev√∂lkerung, nach Gebiet oder nach Postleitzahl sortiert werden. Wir haben bereits eine Reihe von Algorithmen gesehen, die von einer sortierten Liste profitieren konnten (vgl. Bin√§re Suche). Folgende Sortieralgorithmen gibt es:

  - Bubble Sort 
  - Selection Sort 
  - Insertion Sort 
  - Shell Sort 
  - Merge Sort 
  - Quick Sort 

Im n√§chsten Schritt betrachten wir nun die Sortieralgorithmen einzeln und gehen auf die Implementierung der Algorithmen in Python ein und erkl√§ren dabei auch wie sie funktionieren.

---

#### Bubble Sort 
ist ein einfacher Sortieralgorithmus, der die Liste wiederholt durchl√§uft, benachbarte Elemente vergleicht und sie vertauscht, wenn sie in der falschen Reihenfolge sind. Der Algorithmus wiederholt diesen Vorgang, bis die Liste sortiert ist.

```python
def bubble_sort(arr):
    '''
    arr {list}: a list of numbers
    return: a sorted list of numbers
    '''
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr
```
#### Erkl√§rung:
In diesem Beispiel nimmt die Funktion bubble_sort ein Array arr als Eingabe, sortiert es mit dem Bubble-Sort-Algorithmus und gibt das sortierte Array zur√ºck. Die √§u√üere Schleife wird n-mal durchlaufen, wobei n die L√§nge des Arrays ist, und die innere Schleife vergleicht jedes Paar benachbarter Elemente und tauscht sie aus, wenn sie in der falschen Reihenfolge sind. Dieser Vorgang wird n-mal wiederholt, so dass alle Elemente verglichen und sortiert sind.

---

#### Selection Sort 
ist ein einfacher Sortieralgorithmus, bei dem wiederholt das kleinste Element aus dem unsortierten Teil der Liste gesucht und mit dem ersten unsortierten Element vertauscht wird.

```python
def selection_sort(arr):
    '''
    arr {list}: a list of numbers
    return: a sorted list of numbers
    '''
    for i in range(len(arr)):
        min_index = i
        for j in range(i+1, len(arr)):
            if arr[j] < arr[min_index]:
                min_index = j
        arr[i], arr[min_index] = arr[min_index], arr[i]
    return arr
```
#### Erkl√§rung:
In diesem Beispiel durchl√§uft die √§u√üere Schleife die gesamte Liste, w√§hrend die innere Schleife das kleinste Element im unsortierten Teil der Liste findet. Das gefundene kleinste Element wird dann mit dem ersten unsortierten Element vertauscht, wodurch das kleinste Element an seine endg√ºltige Position in der sortierten Liste verschoben wird. Der Vorgang wird f√ºr den Rest des unsortierten Teils der Liste wiederholt, bis alle Elemente sortiert sind.

---

#### Insertion Sort
ist ein einfacher Sortieralgorithmus, bei dem die Eingabeliste in zwei Teile geteilt wird: einen sortierten und einen unsortierten Teil. Der Algorithmus beginnt mit einem leeren sortierten Teil und nimmt iterativ Elemente aus dem unsortierten Teil und f√ºgt sie an der richtigen Stelle im sortierten Teil ein. 

```python
def insertion_sort(arr):
    '''
    arr {list}: a list of numbers
    return: a sorted list of numbers
    '''
    for i in range(1, len(arr)):
        key = arr[i]
        j = i-1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr
```
#### Erkl√§rung:
In dieser Implementierung durchl√§uft die √§u√üere for-Schleife len(arr) - 1 mal, wobei arr die zu sortierende Eingabeliste ist. Die innere while-Schleife findet die richtige Position f√ºr das aktuelle Element, indem gr√∂√üere Elemente nach rechts verschoben werden. Das Element wird dann an der richtigen Stelle eingef√ºgt, indem der Wert in arr[j + 1] aktualisiert wird.

---

#### Shell Sort 
ist ein Sortieralgorithmus, der auf der Einf√ºgesortierung basiert, aber mit einigen Optimierungen, die ihn f√ºr gr√∂√üere Arrays schneller machen. Er funktioniert, indem er das Eingabe-Array in kleinere Unter-Arrays unterteilt und dann jedes Unter-Array mit Insertion Sort sortiert.

```python
def shell_sort(arr):
    '''
    arr {list}: a list of numbers
    return: a sorted list of numbers
    '''
    n = len(arr)
    gap = n//2
    while gap > 0:
        for i in range(gap, n):
            temp = arr[i]
            j = i
            while j >= gap and arr[j-gap] > temp:
                arr[j] = arr[j-gap]
                j -= gap
            arr[j] = temp
        gap //= 2
    return arr
```
#### Erkl√§rung:
In diesem Beispiel nimmt die Funktion shell_sort ein Eingabe-Array arr und sortiert es mit dem Shell-Sort-Algorithmus. Die L√ºckenvariable wird mit der halben L√§nge des Eingabefeldes initialisiert und schrittweise um die H√§lfte reduziert, bis sie 0 erreicht. Bei jedem Schritt der Schleife wird das Eingabefeld in Unterfelder mit der angegebenen L√ºcke unterteilt, und jedes Unterfeld wird mit Insertion Sort sortiert. Das Ergebnis ist ein vollst√§ndig sortiertes Array.

---

#### Merge Sort
ist ein Sortieralgorithmus, der zum Sortieren eines Arrays einen Divide-and-Conquer-Ansatz verwendet. Dabei wird das Eingabefeld in zwei H√§lften geteilt, jede H√§lfte rekursiv sortiert und dann die beiden sortierten H√§lften wieder zusammengef√ºhrt.

```python
def merge_sort(array):
    '''
    arr {list}: a list of numbers
    return: a sorted list of numbers
    '''

    if len(array) <= 1:
        return array

    mid = len(array) // 2
    left_half = array[:mid]
    right_half = array[mid:]

    left_half = merge_sort(left_half)
    right_half = merge_sort(right_half)

    return merge(left_half, right_half)

def merge(left, right):
    result = []
    left_index = 0
    right_index = 0

    while left_index < len(left) and right_index < len(right):
        if left[left_index] < right[right_index]:
            result.append(left[left_index])
            left_index += 1
        else:
            result.append(right[right_index])
            right_index += 1

    while left_index < len(left):
        result.append(left[left_index])
        left_index += 1

    while right_index < len(right):
        result.append(right[right_index])
        right_index += 1

    return result
```
#### Erkl√§rung:
Die Funktion merge_sort pr√ºft zun√§chst, ob das Eingabefeld 1 oder weniger Elemente hat. Ist dies der Fall, ist das Array bereits sortiert und wird zur√ºckgegeben. Ist dies nicht der Fall, wird das Array in zwei H√§lften geteilt, und jede H√§lfte wird mit merge_sort rekursiv sortiert. Die beiden sortierten H√§lften werden dann mit der merge-Funktion zusammengef√ºhrt. Die merge-Funktion nimmt zwei sortierte Arrays und erstellt ein neues Array, das alle Elemente der beiden Eingabe-Arrays in sortierter Reihenfolge enth√§lt.

---

#### Quick Sort 
ist ein Divide-and-Conquer-Algorithmus zum Sortieren von Arrays. Dabei wird ein Pivot-Element ausgew√§hlt und die anderen Elemente werden in zwei Unterfelder aufgeteilt, je nachdem, ob sie kleiner oder gr√∂√üer als das Pivot-Element sind. Die Unterfelder werden dann rekursiv sortiert.

```python
def quick_sort(arr):
    '''
    arr {list}: a list of numbers
    return: a sorted list of numbers
    '''

    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[0]
        less = [x for x in arr[1:] if x <= pivot]
        greater = [x for x in arr[1:] if x > pivot]
        return quick_sort(less) + [pivot] + quick_sort(greater)
```
#### Erkl√§rung:
In dieser Implementierung nimmt die Funktion quick_sort ein Array als Eingabe und gibt eine sortierte Version des Arrays zur√ºck. Der Basisfall ist, wenn das Array die L√§nge 0 oder 1 hat, in diesem Fall wird das Array so zur√ºckgegeben, wie es ist. In allen anderen F√§llen wird das erste Element des Arrays als Drehpunkt ausgew√§hlt, und die anderen Elemente werden in zwei Unter-Arrays aufgeteilt, je nachdem, ob sie kleiner oder gr√∂√üer als der Drehpunkt sind. Die Unterfelder werden dann rekursiv mit der gleichen quick_sort-Funktion sortiert. Das Endergebnis ergibt sich aus der Verkettung der sortierten Unterfelder mit dem Pivot.